// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package user_test is a generated GoMock package.
package user_test

import (
	context "context"
	reflect "reflect"

	types "github.com/Januadrym/seennit/internal/app/types"
	gomock "github.com/golang/mock/gomock"
)

// MockrepoProvider is a mock of repoProvider interface
type MockrepoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockrepoProviderMockRecorder
}

// MockrepoProviderMockRecorder is the mock recorder for MockrepoProvider
type MockrepoProviderMockRecorder struct {
	mock *MockrepoProvider
}

// NewMockrepoProvider creates a new mock instance
func NewMockrepoProvider(ctrl *gomock.Controller) *MockrepoProvider {
	mock := &MockrepoProvider{ctrl: ctrl}
	mock.recorder = &MockrepoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrepoProvider) EXPECT() *MockrepoProviderMockRecorder {
	return m.recorder
}

// FindUserByMail mocks base method
func (m *MockrepoProvider) FindUserByMail(ctx context.Context, email string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByMail", ctx, email)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByMail indicates an expected call of FindUserByMail
func (mr *MockrepoProviderMockRecorder) FindUserByMail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByMail", reflect.TypeOf((*MockrepoProvider)(nil).FindUserByMail), ctx, email)
}

// Create mocks base method
func (m *MockrepoProvider) Create(ctx context.Context, user *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockrepoProviderMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockrepoProvider)(nil).Create), ctx, user)
}

// FindAll mocks base method
func (m *MockrepoProvider) FindAll(arg0 context.Context) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockrepoProviderMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockrepoProvider)(nil).FindAll), arg0)
}

// DeleteAll mocks base method
func (m *MockrepoProvider) DeleteAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockrepoProviderMockRecorder) DeleteAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockrepoProvider)(nil).DeleteAll), ctx)
}

// Delete mocks base method
func (m *MockrepoProvider) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockrepoProviderMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockrepoProvider)(nil).Delete), ctx, id)
}

// UpdateInfo mocks base method
func (m *MockrepoProvider) UpdateInfo(ctx context.Context, userID string, user *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfo", ctx, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfo indicates an expected call of UpdateInfo
func (mr *MockrepoProviderMockRecorder) UpdateInfo(ctx, userID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfo", reflect.TypeOf((*MockrepoProvider)(nil).UpdateInfo), ctx, userID, user)
}
